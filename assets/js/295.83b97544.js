(window.webpackJsonp=window.webpackJsonp||[]).push([[295],{571:function(s,n,a){"use strict";a.r(n);var t=a(12),i=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"jdk8-新特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk8-新特性"}},[s._v("#")]),s._v(" JDK8 新特性")]),s._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),n("p",[s._v("以下列出两点重要特性：")]),s._v(" "),n("ul",[n("li",[s._v("Lambda 表达式（匿名函数）")]),s._v(" "),n("li",[s._v("Stream 多线程并行数据处理（重要）")])]),s._v(" "),n("h2",{attrs:{id:"新特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新特性"}},[s._v("#")]),s._v(" 新特性")]),s._v(" "),n("ul",[n("li",[s._v("接口的默认方法只需要使用 default 关键字即可，这个特征又叫做 扩展方法")]),s._v(" "),n("li",[s._v("Lambda 表达式")]),s._v(" "),n("li",[s._v("Functional 接口 函数式接口 是指仅仅只包含一个抽象方法的接口，每一个该类型的 Lambda 表达式都会被匹配到这个抽象方法。你只需要给你的接口添加 @FunctionalInterface 注解")]),s._v(" "),n("li",[s._v("使用 :: 双冒号关键字来传递方法(静态方法和非静态方法)")]),s._v(" "),n("li",[s._v("Predicate 接口和 Lambda 表达式")]),s._v(" "),n("li",[s._v("Function 接口\n"),n("ul",[n("li",[s._v("Function 有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法")]),s._v(" "),n("li",[s._v("compose 方法表示在某个方法之前执行")]),s._v(" "),n("li",[s._v("andThen 方法表示在某个方法之后执行")]),s._v(" "),n("li",[s._v("注意：compose 和 andThen 方法调用之后都会把对象自己本身返回，这可以 方便链式编程")])])]),s._v(" "),n("li",[s._v("Supplier 接口，返回一个任意范型的值，和 Function 接口不同的是该接口 没有任何参数")]),s._v(" "),n("li",[s._v("Consumer 接口，接收一个任意范型的值，和 Function 接口不同的是该接口 没有任何值")]),s._v(" "),n("li",[s._v("Optional 类\n"),n("ul",[n("li",[s._v("Optional 不是接口而是一个类，这是个用来防止 NullPointerException 异常的辅助类型")]),s._v(" "),n("li",[s._v("Optional 被定义为一个简单的容器，其值可能是 null 或者不是 null。")]),s._v(" "),n("li",[s._v("在 Java8 之前一般某个函数应该返回非空对象但是偶尔却可能返回了 null，而在 Java8 中，不推荐你返回 null 而是返回 Optional。")]),s._v(" "),n("li",[s._v("这是一个可以为 null 的容器对象。")]),s._v(" "),n("li",[s._v("如果值存在则 isPresent() 方法会返回 true，调用 get() 方法会返回该对象。")])])])]),s._v(" "),n("h2",{attrs:{id:"小栗子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小栗子"}},[s._v("#")]),s._v(" 小栗子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.page.lambda;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * Lambda 基本用法\n * <p>Title: BaseLambda</p>\n * <p>Description: </p>\n *\n * @author Lusifer\n * @version 1.0.0\n * @date 2019/1/6 10:42\n */\npublic class BaseLambda {\n    public static void main(String[] args) {\n        testForeach();\n        testStreamDuplicates();\n    }\n\n    /**\n     * Lambda 遍历\n     */\n    public static void testForeach() {\n        // 定义一个数组\n        String[] array = {\n                "尼尔机械纪元",\n                "关于我转生成为史莱姆这件事",\n                "实力至上主义教师",\n                "地狱少女"\n        };\n\n        // 转换成集合\n        List<String> acgs = Arrays.asList(array);\n\n        // 传统的遍历方式\n        System.out.println("传统的遍历方式：");\n        for (String acg : acgs) {\n            System.out.println(acg);\n        }\n        System.out.println();\n\n        // 使用 Lambda 表达式以及函数操作(functional operation)\n        System.out.println("Lambda 表达式以及函数操作：");\n        acgs.forEach((acg) -> System.out.println(acg));\n        System.out.println();\n\n        // 在 Java 8 中使用双冒号操作符(double colon operator)\n        System.out.println("使用双冒号操作符：");\n        acgs.forEach(System.out::println);\n        System.out.println();\n    }\n\n    /**\n     * Stream 去重复\n     * String 和 Integer 可以使用该方法去重\n     */\n    public static void testStreamDuplicates() {\n        System.out.println("Stream 去重复：");\n\n        // 定义一个数组\n        String[] array = {\n                "尼尔机械纪元",\n                "尼尔机械纪元",\n                "关于我转生成为史莱姆这件事",\n                "关于我转生成为史莱姆这件事",\n                "实力至上主义教师",\n                "实力至上主义教师",\n                "地狱少女",\n                "地狱少女"\n        };\n\n        // 转换成集合\n        List<String> acgs = Arrays.asList(array);\n\n        // Stream 去重复\n        acgs = acgs.stream().distinct().collect(Collectors.toList());\n\n        // 打印\n        acgs.forEach(System.out::println);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br")])])])}),[],!1,null,null,null);n.default=i.exports}}]);