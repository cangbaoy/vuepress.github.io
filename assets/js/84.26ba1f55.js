(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{361:function(e,o,a){"use strict";a.r(o);var r=a(12),t=Object(r.a)({},(function(){var e=this,o=e._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"apache-dubbo-zookeeper"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#apache-dubbo-zookeeper"}},[e._v("#")]),e._v(" Apache Dubbo Zookeeper")]),e._v(" "),o("p",[e._v("目前市场上主流的 第二套微服务架构解决方案：Spring Boot + Dubbo + Zookeeper")]),e._v(" "),o("p",[e._v("Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 框架。\nZooKeeper 是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。")]),e._v(" "),o("h2",{attrs:{id:"分布式协调框架-zookeeper"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#分布式协调框架-zookeeper"}},[e._v("#")]),e._v(" 分布式协调框架 Zookeeper")]),e._v(" "),o("p",[e._v("ZooKeeper 是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程。ZooKeeper 通过其简单的架构和 API 解决了这个问题。ZooKeeper 允许开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。")]),e._v(" "),o("p",[o("RouterLink",{attrs:{to:"/zh/spring-cloud/double/"}},[e._v("点击开始")])],1),e._v(" "),o("h2",{attrs:{id:"高性能-java-rpc-框架-dubbo"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#高性能-java-rpc-框架-dubbo"}},[e._v("#")]),e._v(" 高性能 Java RPC 框架 Dubbo")]),e._v(" "),o("p",[e._v("Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 分布式服务框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。她最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。")]),e._v(" "),o("p",[o("RouterLink",{attrs:{to:"/zh/spring-cloud/double/"}},[e._v("点击开始")])],1)])}),[],!1,null,null,null);o.default=t.exports}}]);