(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{478:function(t,v,a){"use strict";a.r(v);var e=a(12),o=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"线程安全问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程安全问题"}},[t._v("#")]),t._v(" 线程安全问题")]),t._v(" "),v("p",[t._v("线程安全是多线程领域的问题，线程安全可以简单理解为一个方法或者一个实例可以在多线程环境中使用而不会出现问题。")]),t._v(" "),v("p",[t._v("在 Java 多线程编程当中，提供了多种实现 Java 线程安全的方式：")]),t._v(" "),v("ul",[v("li",[t._v("最简单的方式，使用 "),v("code",[t._v("Synchronization")]),t._v(" 关键字")]),t._v(" "),v("li",[t._v("使用 "),v("code",[t._v("java.util.concurrent.atomic")]),t._v(" 包中的原子类，例如 "),v("code",[t._v("AtomicInteger")])]),t._v(" "),v("li",[t._v("使用 "),v("code",[t._v("java.util.concurrent.locks")]),t._v(" 包中的锁")]),t._v(" "),v("li",[t._v("使用线程安全的集合 "),v("code",[t._v("ConcurrentHashMap")])]),t._v(" "),v("li",[t._v("使用 "),v("code",[t._v("volatile")]),t._v(" 关键字，保证变量可见性（直接从内存读，而不是从线程 cache 读）")])])])}),[],!1,null,null,null);v.default=o.exports}}]);